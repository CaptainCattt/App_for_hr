import streamlit as st
from datetime import date, timedelta
from functions import send_leave_request, view_leaves, approve_leave, reject_leave, status_badge, check_admin_login
from settings import EMPLOYEES_COL, LEAVES_COL
from datetime import datetime

# ===============================
# C·∫§U H√åNH C∆† B·∫¢N
# ===============================
st.set_page_config(
    page_title="H·ªá th·ªëng xin ngh·ªâ - L√¢m Media", layout="centered")
st.title("üèñÔ∏è H·ªÜ TH·ªêNG XIN NGH·ªà PH√âP N·ªòI B·ªò")


with st.sidebar:
    st.header("üîê ƒêƒÉng nh·∫≠p HR")
    username = st.text_input("üë§ T√™n ƒëƒÉng nh·∫≠p")
    password = st.text_input("üîë M·∫≠t kh·∫©u", type="password")

    if st.button("ƒêƒÉng nh·∫≠p"):
        if check_admin_login(username, password):
            st.rerun()

    if st.session_state.get("hr_logged_in"):
        st.success(f"Xin ch√†o, {st.session_state.get('admin_name', 'Admin')}!")
        if st.button("ƒêƒÉng xu·∫•t"):
            st.session_state.clear()
            st.rerun()


tabs = ["üìù G·ª≠i y√™u c·∫ßu ngh·ªâ"]
if "hr_logged_in" in st.session_state and st.session_state.hr_logged_in:
    tabs.extend(["üë©‚Äçüíº Qu·∫£n l√Ω y√™u c·∫ßu", "üìä Dashboard nh√¢n vi√™n"])

tab_objects = st.tabs(tabs)

# ===============================
# TAB 1: FORM XIN NGH·ªà
# ===============================
with tab_objects[0]:
    st.subheader("üìù G·ª≠i y√™u c·∫ßu ngh·ªâ")

    # --- L·∫•y danh s√°ch nh√¢n vi√™n ---
    employees = list(EMPLOYEES_COL.find(
        {}, {"_id": 0, "full_name": 1, "department": 1, "position": 1, "remaining_days": 1}))
    employee_names = [emp["full_name"] for emp in employees]

    selected_name = st.selectbox("üë§ Ch·ªçn t√™n c·ªßa b·∫°n", employee_names)

    selected_emp = next(
        (e for e in employees if e["full_name"] == selected_name), None)
    department = selected_emp.get("department", "") if selected_emp else ""
    position = selected_emp.get("position", "") if selected_emp else ""
    remaining_days = selected_emp.get(
        "remaining_days", 0) if selected_emp else 0

    st.text_input("üè¢ Ph√≤ng ban", department, disabled=True)

    # --- Ch·ªçn lo·∫°i ngh·ªâ ---
    leave_type = st.selectbox(
        "Vui l√≤ng ch·ªçn lo·∫°i ng√†y ngh·ªâ",
        ("Ngh·ªâ ph√©p nƒÉm", "Ngh·ªâ kh√¥ng h∆∞·ªüng l∆∞∆°ng",
            "Ngh·ªâ h∆∞·ªüng BHXH", "Ngh·ªâ vi·ªác ri√™ng c√≥ h∆∞·ªüng l∆∞∆°ng"),
        index=0
    )

    leave_case = ""
    if leave_type == "Ngh·ªâ ph√©p nƒÉm":
        leave_case = st.selectbox("Lo·∫°i ph√©p nƒÉm", ["Ph√©p nƒÉm"])
    elif leave_type == "Ngh·ªâ kh√¥ng h∆∞·ªüng l∆∞∆°ng":
        leave_case = st.selectbox("L√Ω do ngh·ªâ kh√¥ng h∆∞·ªüng l∆∞∆°ng", [
            "Do h·∫øt ph√©p nƒÉm", "Do vi·ªác c√° nh√¢n th·ªùi gian d√†i"
        ])
    elif leave_type == "Ngh·ªâ h∆∞·ªüng BHXH":
        leave_case = st.selectbox("L√Ω do ngh·ªâ h∆∞·ªüng BHXH", [
            "B·∫£n th√¢n ·ªëm", "Con ·ªëm", "B·∫£n th√¢n ·ªëm d√†i ng√†y",
            "Ch·∫ø ƒë·ªô thai s·∫£n cho n·ªØ", "Ch·∫ø ƒë·ªô thai s·∫£n cho nam",
            "D∆∞·ª°ng s·ª©c (sau ph·∫´u thu·∫≠t, sau sinh, sau ·ªëm, ...)",
            "Suy gi·∫£m kh·∫£ nƒÉng lao ƒë·ªông (15% - tr√™n 51%)"
        ])
    elif leave_type == "Ngh·ªâ vi·ªác ri√™ng c√≥ h∆∞·ªüng l∆∞∆°ng":
        leave_case = st.selectbox("L√Ω do ngh·ªâ vi·ªác ri√™ng c√≥ h∆∞·ªüng l∆∞∆°ng", [
            "B·∫£n th√¢n k·∫øt h√¥n", "Con k·∫øt h√¥n",
            "Tang ch·∫ø t∆∞ th√¢n ph·ª• m·∫´u (B·ªë/m·∫π - v·ª£/ch·ªìng, con ch·∫øt)"
        ])

    col1, col2, col3 = st.columns(3)
    duration = col1.number_input(
        "S·ªë ng√†y ngh·ªâ", min_value=0.5, max_value=30.0, step=0.5, value=1.0)
    start_date = col2.date_input("Ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ", value=date.today())
    end_date_default = start_date + timedelta(days=int(duration)-1)
    end_date = col3.date_input(
        "Ng√†y k·∫øt th√∫c ngh·ªâ", value=end_date_default)
    reason_text = st.text_area("üìù L√Ω do chi ti·∫øt", height=100)

    # --- G·ª≠i y√™u c·∫ßu ---
    if st.button("üì® G·ª≠i y√™u c·∫ßu"):
        if not reason_text.strip():
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p l√Ω do ngh·ªâ.")
        else:
            send_leave_request(selected_name, department, start_date,
                               end_date, duration, reason_text, leave_type, leave_case)

    # ===============================
    # TAB 2: HR QU·∫¢N L√ù
    # ===============================
    if len(tabs) > 1:
        with tab_objects[1]:
            st.subheader("üë©‚Äçüíº Trang qu·∫£n l√Ω ngh·ªâ ph√©p")

            # --- B·ªô l·ªçc d·ªØ li·ªáu ---
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                search_name = st.text_input("T√¨m theo t√™n nh√¢n vi√™n")
            with col2:
                status_filter = st.selectbox(
                    "Tr·∫°ng th√°i", ["T·∫•t c·∫£", "pending", "approved", "rejected"])
                query_status = None if status_filter == "T·∫•t c·∫£" else status_filter
            with col3:
                year_options = [
                    "T·∫•t c·∫£"] + [str(y) for y in range(2024, datetime.now().year + 1)]
                selected_year = st.selectbox(
                    "NƒÉm", options=year_options, index=year_options.index(str(datetime.now().year)))
            with col4:
                month_options = ["T·∫•t c·∫£"] + [f"{i:02d}" for i in range(1, 13)]
                selected_month = st.selectbox(
                    "Th√°ng", options=month_options, index=datetime.now().month)

            # --- L·∫•y d·ªØ li·ªáu t·ª´ DB ---
            leaves = view_leaves(query_status)

            # --- L·ªçc theo t√™n ---
            if search_name:
                leaves = [l for l in leaves if search_name.lower() in l.get(
                    "full_name", "").lower()]

            # --- L·ªçc theo th√°ng/nƒÉm ---
            filtered_leaves = []
            for leave in leaves:
                try:
                    start_date = leave.get("start_date")
                    if not start_date:
                        continue
                    year = start_date[:4]
                    month = start_date[5:7]

                    # ƒêi·ªÅu ki·ªán l·ªçc ƒë·ªông
                    if (
                        (selected_year == "T·∫•t c·∫£" or year == selected_year)
                        and (selected_month == "T·∫•t c·∫£" or month == selected_month)
                    ):
                        filtered_leaves.append(leave)
                except Exception:
                    continue

            # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
            if not filtered_leaves:
                st.info(
                    f"üïäÔ∏è Kh√¥ng c√≥ y√™u c·∫ßu ngh·ªâ n√†o trong {selected_month}/{selected_year}.")
            else:
                for leave in filtered_leaves:
                    with st.expander(f"üìÑ {leave.get('full_name', '')} | {leave.get('leave_case', '')}"):
                        st.write(
                            f"**Ph√≤ng ban:** {leave.get('department', '')}")
                        st.write(
                            f"**Th·ªùi gian:** {leave.get('start_date')} ‚Üí {leave.get('end_date')} ({leave.get('duration')} ng√†y)"
                        )
                        st.write(f"**Lo·∫°i ngh·ªâ:** {leave.get('leave_type')}")
                        st.write(
                            f"**L√Ω do chi ti·∫øt:** {leave.get('reason', '')}")
                        st.write(
                            f"**Tr·∫°ng th√°i:** {status_badge(leave.get('status', ''))}")
                        st.write(
                            f"**G·ª≠i l√∫c:** {leave.get('requested_at', '')}")
                        st.markdown("<br>", unsafe_allow_html=True)

                        if leave.get("approved_by"):
                            st.write(
                                f"**Ph√™ duy·ªát b·ªüi:** {leave.get('approved_by')} l√∫c {leave.get('approved_at')}")

                        if leave.get("status") == "pending":
                            col_left, col_spacer, col_right = st.columns([
                                                                         1, 4, 1])

                            with col_left:
                                if st.button("‚úÖ Duy·ªát", key=f"approve_{leave['_id']}"):
                                    approve_leave(
                                        leave["_id"], st.session_state.hr_username)

                            with col_right:
                                if st.button("‚ùå T·ª´ ch·ªëi", key=f"reject_{leave['_id']}"):
                                    reject_leave(
                                        leave["_id"], st.session_state.hr_username)

    if len(tabs) > 2:
        with tab_objects[2]:
            st.subheader("üìä Dashboard t·ªïng h·ª£p ngh·ªâ ph√©p")

            # --- Ki·ªÉm tra ƒëƒÉng nh·∫≠p HR ---
            if "hr_logged_in" not in st.session_state:
                st.warning(
                    "‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ·ªü tab 'D√†nh cho HR' ƒë·ªÉ xem Dashboard.")
                st.stop()
            employees = list(EMPLOYEES_COL.find({}, {"_id": 0}))
            employee_names = [emp["full_name"] for emp in employees]

            selected_emp_name = st.selectbox(
                "üë§ Ch·ªçn nh√¢n vi√™n", employee_names)

            selected_emp = next(
                (e for e in employees if e["full_name"] == selected_emp_name), None)

            if not selected_emp:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n.")
                st.stop()

            # --- Th√¥ng tin c∆° b·∫£n ---
            emp_name = selected_emp.get("full_name", "")
            department = selected_emp.get("department", "")
            position = selected_emp.get("position", "")
            dob = selected_emp.get("dob", "-")
            phone = selected_emp.get("phone", "-")
            remaining = selected_emp.get("remaining_days", 0)

            st.markdown(f"""
                <style>
                    .info-wrapper {{
                        display: flex;
                        justify-content: center;
                        margin-top: 20px;
                    }}
                    .info-card {{
                        background-color: #ffffff;
                        padding: 25px 30px;
                        border-radius: 15px;
                        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
                        width: 85%;
                        max-width: 900px;
                        transition: all 0.3s ease;
                        font-family: "Segoe UI", sans-serif;
                    }}
                    .info-card:hover {{
                        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
                    }}
                    .info-header {{
                        font-size: 1.3rem;
                        font-weight: 600;
                        color: #2c3e50;
                        margin-bottom: 15px;
                        padding-left: 10px;
                        text-align: center;
                    }}
                    .info-flex {{
                        display: flex;
                        flex-wrap: wrap;
                        justify-content: center;
                        gap: 40px;
                    }}
                    .info-col {{
                        flex: 1;
                        min-width: 250px;
                        line-height: 1.8;
                        color: #333;
                    }}
                    .badge {{
                        background-color: #e0f7ec;
                        color: #15803d;
                        padding: 4px 10px;
                        border-radius: 8px;
                        font-weight: 600;
                    }}
                </style>

                <div class="info-wrapper">
                    <div class="info-card">
                        <h3 class="info-header">üßæ Th√¥ng tin c√° nh√¢n</h3>
                        <div class="info-flex">
                            <div class="info-col">
                                <p><b>üë§ H·ªç v√† t√™n:</b> {selected_emp.get('full_name', '')}</p>
                                <p><b>üè¢ Ph√≤ng ban:</b> {selected_emp.get('department', '')}</p>
                                <p><b>üíº Ch·ª©c v·ª•:</b> {selected_emp.get('position', '')}</p>
                            </div>
                            <div class="info-col">
                                <p><b>üéÇ Ng√†y sinh:</b> {selected_emp.get('dob', '-')}</p>
                                <p><b>üìû S·ªë ƒëi·ªán tho·∫°i:</b> {selected_emp.get('phone', '-')}</p>
                                <p><b>üèñÔ∏è Ng√†y ph√©p c√≤n l·∫°i:</b> <span class="badge">{selected_emp.get('remaining_days', 0)}</span></p>
                            </div>
                        </div>
                    </div>
                </div>
            """, unsafe_allow_html=True)
            # --- L·∫•y to√†n b·ªô d·ªØ li·ªáu ngh·ªâ ph√©p ---
            all_leaves = list(LEAVES_COL.find())
            st.markdown("<br><br>", unsafe_allow_html=True)
            if not all_leaves:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ngh·ªâ ph√©p.")
            else:
                import pandas as pd
                import plotly.express as px

                df = pd.DataFrame(all_leaves)
                df["start_date"] = pd.to_datetime(
                    df["start_date"], errors="coerce")
                df["year_month"] = df["start_date"].dt.to_period(
                    "M").astype(str)

                # --- T·ªïng s·ªë ng√†y ngh·ªâ theo ph√≤ng ban ---
                dept_summary = df.groupby("department")[
                    "duration"].sum().reset_index()
                fig1 = px.bar(dept_summary, x="department", y="duration",
                              title="üè¢ T·ªïng s·ªë ng√†y ngh·ªâ theo ph√≤ng ban",
                              text_auto=True)
                st.plotly_chart(fig1, use_container_width=True)

                # --- Bi·ªÉu ƒë·ªì tr·∫°ng th√°i ---
                status_summary = df["status"].value_counts().reset_index()
                status_summary.columns = ["status", "count"]
                fig2 = px.pie(status_summary, names="status", values="count",
                              title="üìä T·ª∑ l·ªá tr·∫°ng th√°i ngh·ªâ ph√©p", hole=0.4)
                st.plotly_chart(fig2, use_container_width=True)

                # --- Bi·ªÉu ƒë·ªì theo th√°ng ---
                monthly = df.groupby("year_month")[
                    "duration"].sum().reset_index()
                fig3 = px.line(monthly, x="year_month", y="duration",
                               markers=True, title="üìÖ T·ªïng ng√†y ngh·ªâ theo th√°ng")
                st.plotly_chart(fig3, use_container_width=True)

                # --- B·∫£ng chi ti·∫øt ---
                st.markdown("### üìã B·∫£ng chi ti·∫øt ngh·ªâ ph√©p")
                st.dataframe(df[["full_name", "department", "leave_type",
                                "start_date", "end_date", "duration", "status"]])
