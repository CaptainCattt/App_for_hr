# functions.py
from settings import USERS_COL, LEAVES_COL, SESSIONS_COL, COOKIES, STATUS_COLORS
from bson import ObjectId
from datetime import datetime, timedelta
import streamlit as st
import time
import uuid

# ---------- Auth / session helpers ----------


def get_current_user():
    """
    Tr·∫£ v·ªÅ user t·ª´ cookie/session token n·∫øu h·ª£p l·ªá.
    ƒê·ªìng th·ªùi ghi l·∫°i th√¥ng tin v√†o st.session_state ƒë·ªÉ UI s·ª≠ d·ª•ng.
    """
    token = COOKIES.get("session_token")
    if not token:
        return None

    session = SESSIONS_COL.find_one({"token": token})
    if not session:
        return None

    # N·∫øu expired => x√≥a session + cookie
    if session.get("expired_at") and session["expired_at"] < datetime.now():
        SESSIONS_COL.delete_one({"token": token})
        COOKIES["session_token"] = ""
        COOKIES.save()
        return None

    # Ghi v√†o session_state (gi√∫p UI kh√¥ng y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i sau reload)
    st.session_state["username"] = session["username"]
    st.session_state["role"] = session.get("role", "employee")

    # ƒêi·ªÅn th√™m th√¥ng tin t·ª´ users collection n·∫øu c√≥
    user = USERS_COL.find_one({"username": session["username"]})
    if user:
        st.session_state["full_name"] = user.get("full_name", user["username"])
        st.session_state["position"] = user.get("position", "")
        st.session_state["department"] = user.get("department", "")
        st.session_state["remaining_days"] = user.get("remaining_days", 0)
    return {"username": session["username"], "role": session.get("role", "employee")}


def do_login(username, password):
    """
    Ki·ªÉm tra user/password, t·∫°o session token, l∆∞u cookie.
    G·ªçi do_login b·∫±ng partial t·ª´ app khi b·∫•m n√∫t Login.
    """
    placeholder = st.empty()
    with placeholder:
        st.info("üîë ƒêang ƒëƒÉng nh·∫≠p...")
    time.sleep(0.4)

    user = USERS_COL.find_one({"username": username, "password": password})
    if not user:
        placeholder.error("‚ùå Sai username ho·∫∑c password")
        time.sleep(1.5)
        placeholder.empty()
        return

    # t·∫°o token & session
    token = str(uuid.uuid4())
    expired_at = datetime.now() + timedelta(hours=8)

    SESSIONS_COL.insert_one({
        "username": user["username"],
        "role": user.get("role", "employee"),
        "token": token,
        "expired_at": expired_at
    })

    # l∆∞u cookie token (ri√™ng cho tr√¨nh duy·ªát)
    COOKIES["session_token"] = token
    COOKIES.save()

    # l∆∞u session_state ƒë·ªÉ UI d√πng
    st.session_state["username"] = user["username"]
    st.session_state["role"] = user.get("role", "employee")
    st.session_state["full_name"] = user.get("full_name", user["username"])
    st.session_state["position"] = user.get("position", "")
    st.session_state["department"] = user.get("department", "")
    st.session_state["remaining_days"] = user.get("remaining_days", 0)

    placeholder.success(
        f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o {st.session_state['full_name']}")
    time.sleep(1.2)
    placeholder.empty()

    # y√™u c·∫ßu app rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI
    st.session_state["rerun_needed"] = True


def logout():
    placeholder = st.empty()
    with placeholder:
        st.info("üö™ ƒêang ƒëƒÉng xu·∫•t...")
    time.sleep(0.4)

    token = COOKIES.get("session_token")
    if token:
        SESSIONS_COL.delete_one({"token": token})

    # clear local state & cookie
    st.session_state.clear()
    COOKIES["session_token"] = ""
    COOKIES.save()

    placeholder.success("‚úÖ B·∫°n ƒë√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")
    time.sleep(1.2)
    placeholder.empty()
    st.session_state["rerun_needed"] = True


# ---------- Leave related ----------

def status_badge(status: str):
    return STATUS_COLORS.get(status, status)


def request_leave(username, start_date, end_date, duration, reason, leave_type, leave_case):
    # ensure date string
    if not isinstance(start_date, str):
        start_date = start_date.strftime("%Y-%m-%d")
    if not isinstance(end_date, str):
        end_date = end_date.strftime("%Y-%m-%d")

    LEAVES_COL.insert_one({
        "username": username,
        "start_date": start_date,
        "end_date": end_date,
        "duration": duration,
        "reason": reason,
        "leave_type": leave_type,
        "leave_case": leave_case,
        "status": "pending",
        "requested_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "approved_by": None,
        "approved_at": None
    })


def view_leaves(username=None):
    if username:
        return list(LEAVES_COL.find({"username": username}))
    return list(LEAVES_COL.find())


def send_leave_request(username, start_date, end_date, duration, reason, leave_type, leave_case):
    """
    G·ªçi khi user b·∫•m g·ª≠i. Kh√≥a n√∫t ngay l·∫≠p t·ª©c b·∫±ng session_state tr∆∞·ªõc khi insert.
    """
    st.session_state["leave_btn_disabled"] = True
    st.session_state["last_leave_request"] = time.time()

    # Insert tr·ª±c ti·∫øp (kh√¥ng sleep l·ªõn)
    request_leave(username, start_date, end_date,
                  duration, reason, leave_type, leave_case)

    # hi·ªÉn th·ªã success flash ng·∫Øn
    placeholder = st.empty()
    placeholder.success("üì§ Y√™u c·∫ßu ƒë√£ g·ª≠i!")
    time.sleep(1.5)
    placeholder.empty()
    # cho UI c·∫≠p nh·∫≠t (kh√¥ng b·∫Øt bu·ªôc)
    st.session_state["rerun_needed"] = True


def approve_leave(l_id, user_name):
    """
    Approve: c·∫≠p nh·∫≠t status + approved_by/approved_at + tr·ª´ remaining_days n·∫øu ph√π h·ª£p.
    H√†m n√†y g·ªçi t·ª´ UI c·ªßa admin. Kh√≥a UI b√™n app b·∫±ng rerun flag + hi·ªÉn th·ªã flash.
    """
    placeholder = st.empty()
    with placeholder:
        st.info("‚úÖ ƒêang duy·ªát...")
    time.sleep(0.4)

    leave = LEAVES_COL.find_one({"_id": ObjectId(l_id)})
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    LEAVES_COL.update_one({"_id": ObjectId(l_id)}, {"$set": {
        "status": "approved",
        "approved_by": st.session_state.get("full_name", "Admin"),
        "approved_at": now_str
    }})

    if leave and leave.get("leave_type") == "Ngh·ªâ ph√©p nƒÉm":
        duration = float(leave.get("duration", 1))
        USERS_COL.update_one({"username": user_name}, {
                             "$inc": {"remaining_days": -duration}})

    placeholder.success(
        f"‚úÖ Y√™u c·∫ßu c·ªßa {user_name} ƒë√£ ƒë∆∞·ª£c duy·ªát l√∫c {now_str}!")
    time.sleep(1.2)
    placeholder.empty()
    # set message to show on next render
    st.session_state["leave_message"] = f"Y√™u c·∫ßu c·ªßa {user_name} ƒë√£ ƒë∆∞·ª£c duy·ªát."
    st.session_state["rerun_needed"] = True


def reject_leave(l_id, user_name):
    placeholder = st.empty()
    with placeholder:
        st.info("‚ùå ƒêang t·ª´ ch·ªëi...")
    time.sleep(0.4)

    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    LEAVES_COL.update_one({"_id": ObjectId(l_id)}, {"$set": {
        "status": "rejected",
        "approved_by": st.session_state.get("full_name", "Admin"),
        "approved_at": now_str
    }})

    placeholder.error(
        f"‚ùå Y√™u c·∫ßu c·ªßa {user_name} ƒë√£ b·ªã t·ª´ ch·ªëi l√∫c {now_str}!")
    time.sleep(1.2)
    placeholder.empty()
    st.session_state["leave_message"] = f"Y√™u c·∫ßu c·ªßa {user_name} ƒë√£ b·ªã t·ª´ ch·ªëi."
    st.session_state["rerun_needed"] = True
